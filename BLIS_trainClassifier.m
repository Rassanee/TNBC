function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 27-Aug-2021 10:36:21


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'IDO1', 'CXCL13', 'MMP12', 'LAMP3', 'CXCL11', 'GZMB', 'RARRES1', 'CXCL10', 'CHI3L1', 'AIM2', 'NUF2', 'CXCL9', 'APOBEC3B', 'MCM10', 'GBP5', 'EZH2', 'CCL5', 'ADAMDEC1', 'CEP55', 'MMP1', 'GBP1', 'IFI44L', 'KRT6A', 'DLGAP5', 'KLHDC7B', 'CHI3L2', 'FOXM1', 'CDKN2A', 'TAP1', 'PSMB9', 'TMPRSS3', 'CMPK2', 'NDC80', 'MELK', 'RTP4', 'PPP1R14C', 'CDC20', 'PBK', 'FDCSP', 'MUC16', 'TRIP13', 'PDZK1IP1', 'LRP8', 'MX1', 'FAM83D', 'RAD51AP1', 'ANLN', 'KIF15', 'KIF20A', 'STAT1', 'TPX2', 'MMP7', 'SMC4', 'PTTG1', 'CDK1', 'STIL', 'HERC5', 'WARS', 'MASTL', 'NLRC5', 'NCAPG', 'BBOX1', 'ZBED2', 'KIF14', 'PMAIP1', 'TOP2A', 'XK', 'POU2AF1', 'E2F8', 'IRF1', 'ANP32E', 'CKS2', 'CDCA8', 'SOX8', 'SHC4', 'ROPN1', 'KRT14', 'KRT81', 'HORMAD1', 'VTCN1', 'SOSTDC1', 'PNMA8A', 'IRX1', 'UGT8', 'KRT23', 'ART3', 'CELF5', 'MIA', 'TTYH1', 'PTPRZ1', 'COL9A3', 'KANK4', 'EN1', 'DNER', 'BCL11A', 'FOXC1', 'TUBB2B', 'SLC6A14', 'DSC3', 'CRISPLD1', 'SFRP1', 'BAMBI', 'GPM6B', 'DSC2', 'FREM2', 'SOX10', 'PTCHD1', 'NRTN', 'FAM198A', 'KCNK5', 'COL2A1', 'VANGL2', 'SIX3', 'DSG3', 'CHMP4C', 'KRT15', 'KIT', 'FRMD3', 'TET1', 'RNF182', 'PRAME', 'TDRD12', 'KRT6B', 'SERPINB5', 'KLF5', 'TMEM158', 'CYB5R2', 'FOXP4AS1', 'PRTFDC1', 'MAP2', 'CYP39A1', 'TFCP2L1', 'VGLL1', 'MAMLD1', 'ID4', 'LRRN1', 'TCF7L1', 'GGH', 'CRYAB', 'NINL', 'NCAN', 'EPHB3', 'PHGDH', 'PRKX', 'PCAT6', 'ESRP1', 'FZD7', 'SLC26A2', 'ADIPOQ', 'ADH1B', 'OGN', 'CD36', 'FABP4', 'CHRDL1', 'CFD', 'LINC01279', 'PLIN1', 'SFRP4', 'ACKR1', 'IGF1', 'HBB', 'EFEMP1', 'GPX3', 'CXCL14', 'ENPP2', 'SRPX', 'DPT', 'IL33', 'AOC3', 'F13A1', 'ITM2A', 'GPR34', 'IGFBP6', 'G0S2', 'EDNRB', 'MFAP5', 'MRC1', 'CCDC80', 'LEP', 'DCN', 'CILP', 'ITIH5', 'GIMAP7', 'TMEM100', 'CFH', 'DCLK1', 'SYNPO2', 'ADGRL4', 'MRGPRF', 'EMCN', 'EBF1', 'AKR1C3', 'FOSB', 'CXCL12', 'TSPAN7', 'TGFBR3', 'CNRIP1', 'C7', 'PCOLCE2', 'ADAMTS5', 'LRRN4CL', 'WISP2', 'PROS1', 'AKR1C2', 'GIMAP6', 'FOS', 'MAMDC2', 'CCL19', 'GHR', 'LPL', 'HTR2B', 'HMCN1', 'FGL2', 'TIMP4', 'CAV1', 'GPAM', 'EGR3', 'OLFML1', 'GGTA1P', 'NDN', 'SPARCL1', 'P2RY14', 'MFAP4', 'CLU', 'C2orf40', 'SERPINF1', 'GALNT15', 'MMRN2', 'TCEAL1', 'ANGPTL1', 'SPON1', 'ADRB2', 'LY96', 'ADGRD1', 'PPARG', 'FSTL1', 'PCSK5', 'PLTP', 'HSD17B11', 'CH25H', 'ZCCHC24', 'C6', 'C16orf54', 'SELP', 'SLIT2', 'MPEG1', 'FMO2', 'COLEC12', 'ALDH1A1', 'THBS4', 'SCN4B', 'RSPO3', 'VSIG4', 'VGLL3', 'SEMA3G', 'AOX1', 'OMD', 'AGTR1', 'FAT4', 'JAM2', 'SRGN', 'CIDEC', 'CAVIN2', 'FBLN1', 'SLIT3', 'FMOD', 'CPXM1', 'FMO1', 'GIMAP2', 'PDGFRL', 'KCTD12', 'CPVL', 'JCHAIN', 'TNMD', 'FAM162B', 'MCTP1', 'GEM', 'GNG11', 'CLIC2', 'LHFPL6', 'SFRP2', 'PLSCR4', 'S1PR1', 'GIMAP1', 'CLDN5', 'CDH5', 'ZEB2', 'MEOX1', 'COL15A1', 'MIR100HG', 'APOLD1', 'ZNF423', 'ADGRF5', 'ACVR1C', 'ZFPM2', 'MME', 'PLA2G2A', 'CD163', 'PDE2A', 'PLIN4', 'CD69', 'CTSK', 'ECSCR', 'TFPI', 'LYVE1', 'FHL1', 'HAS2', 'WLS', 'NRN1', 'PCK1', 'CD14', 'PTGDS', 'AKAP12', 'PLPP1', 'EVI2A', 'OLFML3', 'MEOX2', 'SCARA5', 'DAB2', 'GIMAP4', 'CFI', 'TMEM255A', 'IGFBP4', 'FBN1', 'SLC19A3', 'CAV2', 'GZMK', 'CDO1', 'DIPK1A', 'CD93', 'RELN', 'C3', 'DUSP6', 'AQP1', 'ECM2', 'SOX17', 'SELL', 'C1QB', 'CPE', 'MGLL', 'NAP1L3', 'IGDCC4', 'RARRES2', 'EPDR1', 'RGS18', 'CSF2RB', 'PRICKLE2', 'ANKRD29', 'CCDC69', 'EPB41L3', 'RGL1', 'MS4A6A', 'CLDN11', 'PLPP3', 'PECAM1', 'LIFR', 'MICU3', 'NNMT', 'LPAR1', 'PRRX1', 'RNASE6', 'HOXD8', 'MAN1C1', 'IL6', 'CD248', 'C1R', 'SPRY1', 'TM6SF1', 'MEF2C', 'COX7A1', 'MT1M', 'TCF4', 'PAMR1', 'STEAP1', 'EVI2B', 'CLEC2B', 'ABCA6', 'C1QA', 'FBLN5', 'NEXN', 'PEAR1', 'PCOLCE', 'HCAR3', 'PDGFD', 'SELE', 'GLT8D2', 'AADAC', 'KCNJ8', 'FILIP1L', 'NID2', 'THSD7A', 'FCN1', 'LUM', 'EMP3', 'ANGPTL2', 'FCGR2B', 'HOXA5', 'MAOA', 'CCDC3', 'LIMA1', 'CPED1', 'HLADPA1', 'CCDC178', 'TMEM140', 'ZBTB16', 'IL10RA', 'LINC01140', 'PTPRC', 'MS4A4A', 'GPR183', 'PRG4', 'HTRA1', 'TMEM119', 'HSD11B1', 'LRRC32', 'RASD1', 'TSHZ2', 'PRSS23', 'HCLS1', 'ID3', 'TMEM132C', 'HAS1', 'IL6ST', 'HLADMA', 'EMP1', 'TWIST1', 'MS4A7', 'RCAN2', 'TMTC1', 'MEST', 'CHL1', 'MAN1A1', 'NR3C1', 'GYG2', 'C1orf162', 'TXNIP', 'CYTIP', 'CHSY3', 'FGF7P3', 'HLADRA', 'TM4SF18', 'P2RY13', 'PTN', 'ACSL1', 'THBD', 'IRF8', 'SPRY2', 'DOCK11', 'MNDA', 'LAMA2', 'KAT2B', 'SCGB1D2', 'CLMP', 'GPR171', 'ASPA', 'C1S', 'CYP1B1', 'ANGPT1', 'FRMD6', 'FMO3', 'ITGBL1', 'NAP1L5', 'MMRN1', 'ZFP36', 'ACKR2', 'CES1', 'PROCR', 'CSF1R', 'APLNR', 'CREBL2', 'SNAI2', 'GPR146', 'C1orf54', 'LGMN', 'PLAC8', 'RUNDC3B', 'PPP1R16B', 'LDB2', 'CELF2', 'SERPING1', 'CD52', 'DDR2', 'CYYR1', 'SLC16A7', 'ANXA1', 'KLB', 'CCL2', 'BCHE', 'SEMA3C', 'TRBC1', 'LRCH2', 'FBLN2', 'MEIS2', 'NUAK1', 'GPRASP1', 'CD34', 'TCIM', 'ADAM12', 'FOXO1', 'CTSC', 'SMIM3', 'GFPT2', 'S100A4', 'SAMHD1', 'MN1', 'BHMT2', 'ITGA1', 'SUCNR1', 'EPS8', 'RBMS3', 'HEG1', 'PALMD', 'TNFRSF17', 'CCR1', 'RBP7', 'BNC2', 'SLFN11', 'EFEMP2', 'VWF', 'IL7R', 'CARD6', 'RAMP3', 'CCL18', 'EMX2', 'INMT', 'TYROBP', 'TNFRSF1B', 'ADAMTS1', 'GMFG', 'KLF4', 'FYN', 'TNN', 'CASQ2', 'PIP', 'FOXA1', 'DHRS2', 'TFF1', 'MLPH', 'AGR3', 'TFF3', 'NAT1', 'AGR2', 'C9orf152', 'GATA3', 'SIDT1', 'REEP6', 'MUCL1', 'AR', 'TOX3', 'GPR160', 'PRR15', 'FAM110C', 'CYP4Z2P', 'CEACAM6', 'KIAA1324', 'AZGP1', 'CPB1', 'DSCAMAS1', 'CYP2B7P', 'STARD10', 'DACH1', 'CA12', 'SDR16C5', 'CMBL', 'KRT18', 'CYP4Z1', 'ZNF703', 'LOC101926959', 'ALCAM', 'TSPAN1', 'SMIM14', 'SYBU', 'SHISA2', 'CAPN13', 'ZG16B', 'BMPR1B', 'PKIB', 'GPRC5A', 'CLSTN2', 'SLC39A6', 'CYP4X1', 'VAV3', 'ABAT', 'INPP4B', 'SLC2A10', 'TFAP2B', 'FAM174B', 'UGT2B28', 'HPGD', 'TPRG1', 'SLC9A3R1', 'GFRA1', 'GALNT6', 'GALNT7', 'PRR15L', 'KCNE4', 'FBP1', 'LINC00993', 'SLC16A6', 'TMC4', 'COMP', 'CLGN', 'LRG1', 'CRIP1', 'CAPN8', 'NQO1', 'COL10A1', 'ANXA9', 'PDZK1', 'SERHL2', 'CXXC5', 'ARMT1', 'HSPB1', 'SYTL2', 'SLC27A2', 'ERBB4', 'CLCA2', 'DHCR24', 'GPD1L', 'NPNT', 'TMC5', 'MUC1', 'TSPAN8', 'REEP1', 'ACADSB', 'CREB3L4', 'EFHD1', 'PLAT', 'TBC1D9', 'HMGCS2', 'DEGS2', 'WWP1', 'MPV17L', 'TNNT1', 'SPDEF', 'HIST1H4H', 'ZBTB42', 'ALDH3B2', 'KRT8', 'FSIP1', 'SHROOM3', 'HIST1H1C', 'MCCC2', 'ACOX2', 'ABCA12', 'MB', 'SYT1', 'MSMB', 'MSX2', 'POTEM', 'ABCC11', 'HIST2H2BE', 'FAM214A', 'SLC44A4', 'ANKRD30A', 'BIK', 'GREB1', 'MATN3', 'ALOX15B', 'MRPS30', 'SLC7A8', 'CROT', 'CYP4B1', 'TTC8', 'TCEAL2', 'LRBA', 'RND1', 'PRLR', 'ACOT4', 'BPIFB1', 'SYT17', 'TMEM45B', 'DCXR', 'CERS6', 'CYB5A', 'ACSS3', 'MARVELD2', 'FLRT3', 'LYPD6B', 'SORD', 'TRIL', 'ATP7B', 'IRX5', 'ZNF652', 'MAGED2', 'MYO5C', 'RERG', 'PNPLA4', 'HIST1H2BC', 'PGR', 'NRIP1', 'C5orf30', 'HGD', 'AP1M2', 'ARFGEF3', 'VSTM2A', 'REPS2', 'ESRRG', 'STC2', 'REEP5', 'SPOPL', 'P4HTM', 'RAB30', 'LRRC31', 'CERS4', 'RAB17', 'DYNLRB2', 'EPB41L5', 'LINC01116', 'GRP', 'SDC4', 'AKR1D1', 'SLC39A11', 'SLC19A2', 'SMIM22', 'HSPA2', 'BLVRB', 'GATA3AS1', 'GSE1'};
predictors = inputTable(:, predictorNames);
response = inputTable.Genesymbols;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationSVM = fitcsvm(...
    predictors, ...
    response, ...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', [], ...
    'KernelScale', 27, ...
    'BoxConstraint', 1, ...
    'Standardize', true, ...
    'ClassNames', categorical({'BLIS'; 'Control'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'AADAC', 'ABAT', 'ABCA12', 'ABCA6', 'ABCC11', 'ACADSB', 'ACKR1', 'ACKR2', 'ACOT4', 'ACOX2', 'ACSL1', 'ACSS3', 'ACVR1C', 'ADAM12', 'ADAMDEC1', 'ADAMTS1', 'ADAMTS5', 'ADGRD1', 'ADGRF5', 'ADGRL4', 'ADH1B', 'ADIPOQ', 'ADRB2', 'AGR2', 'AGR3', 'AGTR1', 'AIM2', 'AKAP12', 'AKR1C2', 'AKR1C3', 'AKR1D1', 'ALCAM', 'ALDH1A1', 'ALDH3B2', 'ALOX15B', 'ANGPT1', 'ANGPTL1', 'ANGPTL2', 'ANKRD29', 'ANKRD30A', 'ANLN', 'ANP32E', 'ANXA1', 'ANXA9', 'AOC3', 'AOX1', 'AP1M2', 'APLNR', 'APOBEC3B', 'APOLD1', 'AQP1', 'AR', 'ARFGEF3', 'ARMT1', 'ART3', 'ASPA', 'ATP7B', 'AZGP1', 'BAMBI', 'BBOX1', 'BCHE', 'BCL11A', 'BHMT2', 'BIK', 'BLVRB', 'BMPR1B', 'BNC2', 'BPIFB1', 'C16orf54', 'C1QA', 'C1QB', 'C1R', 'C1S', 'C1orf162', 'C1orf54', 'C2orf40', 'C3', 'C5orf30', 'C6', 'C7', 'C9orf152', 'CA12', 'CAPN13', 'CAPN8', 'CARD6', 'CASQ2', 'CAV1', 'CAV2', 'CAVIN2', 'CCDC178', 'CCDC3', 'CCDC69', 'CCDC80', 'CCL18', 'CCL19', 'CCL2', 'CCL5', 'CCR1', 'CD14', 'CD163', 'CD248', 'CD34', 'CD36', 'CD52', 'CD69', 'CD93', 'CDC20', 'CDCA8', 'CDH5', 'CDK1', 'CDKN2A', 'CDO1', 'CEACAM6', 'CELF2', 'CELF5', 'CEP55', 'CERS4', 'CERS6', 'CES1', 'CFD', 'CFH', 'CFI', 'CH25H', 'CHI3L1', 'CHI3L2', 'CHL1', 'CHMP4C', 'CHRDL1', 'CHSY3', 'CIDEC', 'CILP', 'CKS2', 'CLCA2', 'CLDN11', 'CLDN5', 'CLEC2B', 'CLGN', 'CLIC2', 'CLMP', 'CLSTN2', 'CLU', 'CMBL', 'CMPK2', 'CNRIP1', 'COL10A1', 'COL15A1', 'COL2A1', 'COL9A3', 'COLEC12', 'COMP', 'COX7A1', 'CPB1', 'CPE', 'CPED1', 'CPVL', 'CPXM1', 'CREB3L4', 'CREBL2', 'CRIP1', 'CRISPLD1', 'CROT', 'CRYAB', 'CSF1R', 'CSF2RB', 'CTSC', 'CTSK', 'CXCL10', 'CXCL11', 'CXCL12', 'CXCL13', 'CXCL14', 'CXCL9', 'CXXC5', 'CYB5A', 'CYB5R2', 'CYP1B1', 'CYP2B7P', 'CYP39A1', 'CYP4B1', 'CYP4X1', 'CYP4Z1', 'CYP4Z2P', 'CYTIP', 'CYYR1', 'DAB2', 'DACH1', 'DCLK1', 'DCN', 'DCXR', 'DDR2', 'DEGS2', 'DHCR24', 'DHRS2', 'DIPK1A', 'DLGAP5', 'DNER', 'DOCK11', 'DPT', 'DSC2', 'DSC3', 'DSCAMAS1', 'DSG3', 'DUSP6', 'DYNLRB2', 'E2F8', 'EBF1', 'ECM2', 'ECSCR', 'EDNRB', 'EFEMP1', 'EFEMP2', 'EFHD1', 'EGR3', 'EMCN', 'EMP1', 'EMP3', 'EMX2', 'EN1', 'ENPP2', 'EPB41L3', 'EPB41L5', 'EPDR1', 'EPHB3', 'EPS8', 'ERBB4', 'ESRP1', 'ESRRG', 'EVI2A', 'EVI2B', 'EZH2', 'F13A1', 'FABP4', 'FAM110C', 'FAM162B', 'FAM174B', 'FAM198A', 'FAM214A', 'FAM83D', 'FAT4', 'FBLN1', 'FBLN2', 'FBLN5', 'FBN1', 'FBP1', 'FCGR2B', 'FCN1', 'FDCSP', 'FGF7P3', 'FGL2', 'FHL1', 'FILIP1L', 'FLRT3', 'FMO1', 'FMO2', 'FMO3', 'FMOD', 'FOS', 'FOSB', 'FOXA1', 'FOXC1', 'FOXM1', 'FOXO1', 'FOXP4AS1', 'FREM2', 'FRMD3', 'FRMD6', 'FSIP1', 'FSTL1', 'FYN', 'FZD7', 'G0S2', 'GALNT15', 'GALNT6', 'GALNT7', 'GATA3', 'GATA3AS1', 'GBP1', 'GBP5', 'GEM', 'GFPT2', 'GFRA1', 'GGH', 'GGTA1P', 'GHR', 'GIMAP1', 'GIMAP2', 'GIMAP4', 'GIMAP6', 'GIMAP7', 'GLT8D2', 'GMFG', 'GNG11', 'GPAM', 'GPD1L', 'GPM6B', 'GPR146', 'GPR160', 'GPR171', 'GPR183', 'GPR34', 'GPRASP1', 'GPRC5A', 'GPX3', 'GREB1', 'GRP', 'GSE1', 'GYG2', 'GZMB', 'GZMK', 'HAS1', 'HAS2', 'HBB', 'HCAR3', 'HCLS1', 'HEG1', 'HERC5', 'HGD', 'HIST1H1C', 'HIST1H2BC', 'HIST1H4H', 'HIST2H2BE', 'HLADMA', 'HLADPA1', 'HLADRA', 'HMCN1', 'HMGCS2', 'HORMAD1', 'HOXA5', 'HOXD8', 'HPGD', 'HSD11B1', 'HSD17B11', 'HSPA2', 'HSPB1', 'HTR2B', 'HTRA1', 'ID3', 'ID4', 'IDO1', 'IFI44L', 'IGDCC4', 'IGF1', 'IGFBP4', 'IGFBP6', 'IL10RA', 'IL33', 'IL6', 'IL6ST', 'IL7R', 'INMT', 'INPP4B', 'IRF1', 'IRF8', 'IRX1', 'IRX5', 'ITGA1', 'ITGBL1', 'ITIH5', 'ITM2A', 'JAM2', 'JCHAIN', 'KANK4', 'KAT2B', 'KCNE4', 'KCNJ8', 'KCNK5', 'KCTD12', 'KIAA1324', 'KIF14', 'KIF15', 'KIF20A', 'KIT', 'KLB', 'KLF4', 'KLF5', 'KLHDC7B', 'KRT14', 'KRT15', 'KRT18', 'KRT23', 'KRT6A', 'KRT6B', 'KRT8', 'KRT81', 'LAMA2', 'LAMP3', 'LDB2', 'LEP', 'LGMN', 'LHFPL6', 'LIFR', 'LIMA1', 'LINC00993', 'LINC01116', 'LINC01140', 'LINC01279', 'LOC101926959', 'LPAR1', 'LPL', 'LRBA', 'LRCH2', 'LRG1', 'LRP8', 'LRRC31', 'LRRC32', 'LRRN1', 'LRRN4CL', 'LUM', 'LY96', 'LYPD6B', 'LYVE1', 'MAGED2', 'MAMDC2', 'MAMLD1', 'MAN1A1', 'MAN1C1', 'MAOA', 'MAP2', 'MARVELD2', 'MASTL', 'MATN3', 'MB', 'MCCC2', 'MCM10', 'MCTP1', 'MEF2C', 'MEIS2', 'MELK', 'MEOX1', 'MEOX2', 'MEST', 'MFAP4', 'MFAP5', 'MGLL', 'MIA', 'MICU3', 'MIR100HG', 'MLPH', 'MME', 'MMP1', 'MMP12', 'MMP7', 'MMRN1', 'MMRN2', 'MN1', 'MNDA', 'MPEG1', 'MPV17L', 'MRC1', 'MRGPRF', 'MRPS30', 'MS4A4A', 'MS4A6A', 'MS4A7', 'MSMB', 'MSX2', 'MT1M', 'MUC1', 'MUC16', 'MUCL1', 'MX1', 'MYO5C', 'NAP1L3', 'NAP1L5', 'NAT1', 'NCAN', 'NCAPG', 'NDC80', 'NDN', 'NEXN', 'NID2', 'NINL', 'NLRC5', 'NNMT', 'NPNT', 'NQO1', 'NR3C1', 'NRIP1', 'NRN1', 'NRTN', 'NUAK1', 'NUF2', 'OGN', 'OLFML1', 'OLFML3', 'OMD', 'P2RY13', 'P2RY14', 'P4HTM', 'PALMD', 'PAMR1', 'PBK', 'PCAT6', 'PCK1', 'PCOLCE', 'PCOLCE2', 'PCSK5', 'PDE2A', 'PDGFD', 'PDGFRL', 'PDZK1', 'PDZK1IP1', 'PEAR1', 'PECAM1', 'PGR', 'PHGDH', 'PIP', 'PKIB', 'PLA2G2A', 'PLAC8', 'PLAT', 'PLIN1', 'PLIN4', 'PLPP1', 'PLPP3', 'PLSCR4', 'PLTP', 'PMAIP1', 'PNMA8A', 'PNPLA4', 'POTEM', 'POU2AF1', 'PPARG', 'PPP1R14C', 'PPP1R16B', 'PRAME', 'PRG4', 'PRICKLE2', 'PRKX', 'PRLR', 'PROCR', 'PROS1', 'PRR15', 'PRR15L', 'PRRX1', 'PRSS23', 'PRTFDC1', 'PSMB9', 'PTCHD1', 'PTGDS', 'PTN', 'PTPRC', 'PTPRZ1', 'PTTG1', 'RAB17', 'RAB30', 'RAD51AP1', 'RAMP3', 'RARRES1', 'RARRES2', 'RASD1', 'RBMS3', 'RBP7', 'RCAN2', 'REEP1', 'REEP5', 'REEP6', 'RELN', 'REPS2', 'RERG', 'RGL1', 'RGS18', 'RNASE6', 'RND1', 'RNF182', 'ROPN1', 'RSPO3', 'RTP4', 'RUNDC3B', 'S100A4', 'S1PR1', 'SAMHD1', 'SCARA5', 'SCGB1D2', 'SCN4B', 'SDC4', 'SDR16C5', 'SELE', 'SELL', 'SELP', 'SEMA3C', 'SEMA3G', 'SERHL2', 'SERPINB5', 'SERPINF1', 'SERPING1', 'SFRP1', 'SFRP2', 'SFRP4', 'SHC4', 'SHISA2', 'SHROOM3', 'SIDT1', 'SIX3', 'SLC16A6', 'SLC16A7', 'SLC19A2', 'SLC19A3', 'SLC26A2', 'SLC27A2', 'SLC2A10', 'SLC39A11', 'SLC39A6', 'SLC44A4', 'SLC6A14', 'SLC7A8', 'SLC9A3R1', 'SLFN11', 'SLIT2', 'SLIT3', 'SMC4', 'SMIM14', 'SMIM22', 'SMIM3', 'SNAI2', 'SORD', 'SOSTDC1', 'SOX10', 'SOX17', 'SOX8', 'SPARCL1', 'SPDEF', 'SPON1', 'SPOPL', 'SPRY1', 'SPRY2', 'SRGN', 'SRPX', 'STARD10', 'STAT1', 'STC2', 'STEAP1', 'STIL', 'SUCNR1', 'SYBU', 'SYNPO2', 'SYT1', 'SYT17', 'SYTL2', 'TAP1', 'TBC1D9', 'TCEAL1', 'TCEAL2', 'TCF4', 'TCF7L1', 'TCIM', 'TDRD12', 'TET1', 'TFAP2B', 'TFCP2L1', 'TFF1', 'TFF3', 'TFPI', 'TGFBR3', 'THBD', 'THBS4', 'THSD7A', 'TIMP4', 'TM4SF18', 'TM6SF1', 'TMC4', 'TMC5', 'TMEM100', 'TMEM119', 'TMEM132C', 'TMEM140', 'TMEM158', 'TMEM255A', 'TMEM45B', 'TMPRSS3', 'TMTC1', 'TNFRSF17', 'TNFRSF1B', 'TNMD', 'TNN', 'TNNT1', 'TOP2A', 'TOX3', 'TPRG1', 'TPX2', 'TRBC1', 'TRIL', 'TRIP13', 'TSHZ2', 'TSPAN1', 'TSPAN7', 'TSPAN8', 'TTC8', 'TTYH1', 'TUBB2B', 'TWIST1', 'TXNIP', 'TYROBP', 'UGT2B28', 'UGT8', 'VANGL2', 'VAV3', 'VGLL1', 'VGLL3', 'VSIG4', 'VSTM2A', 'VTCN1', 'VWF', 'WARS', 'WISP2', 'WLS', 'WWP1', 'XK', 'ZBED2', 'ZBTB16', 'ZBTB42', 'ZCCHC24', 'ZEB2', 'ZFP36', 'ZFPM2', 'ZG16B', 'ZNF423', 'ZNF652', 'ZNF703'};
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2020a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'IDO1', 'CXCL13', 'MMP12', 'LAMP3', 'CXCL11', 'GZMB', 'RARRES1', 'CXCL10', 'CHI3L1', 'AIM2', 'NUF2', 'CXCL9', 'APOBEC3B', 'MCM10', 'GBP5', 'EZH2', 'CCL5', 'ADAMDEC1', 'CEP55', 'MMP1', 'GBP1', 'IFI44L', 'KRT6A', 'DLGAP5', 'KLHDC7B', 'CHI3L2', 'FOXM1', 'CDKN2A', 'TAP1', 'PSMB9', 'TMPRSS3', 'CMPK2', 'NDC80', 'MELK', 'RTP4', 'PPP1R14C', 'CDC20', 'PBK', 'FDCSP', 'MUC16', 'TRIP13', 'PDZK1IP1', 'LRP8', 'MX1', 'FAM83D', 'RAD51AP1', 'ANLN', 'KIF15', 'KIF20A', 'STAT1', 'TPX2', 'MMP7', 'SMC4', 'PTTG1', 'CDK1', 'STIL', 'HERC5', 'WARS', 'MASTL', 'NLRC5', 'NCAPG', 'BBOX1', 'ZBED2', 'KIF14', 'PMAIP1', 'TOP2A', 'XK', 'POU2AF1', 'E2F8', 'IRF1', 'ANP32E', 'CKS2', 'CDCA8', 'SOX8', 'SHC4', 'ROPN1', 'KRT14', 'KRT81', 'HORMAD1', 'VTCN1', 'SOSTDC1', 'PNMA8A', 'IRX1', 'UGT8', 'KRT23', 'ART3', 'CELF5', 'MIA', 'TTYH1', 'PTPRZ1', 'COL9A3', 'KANK4', 'EN1', 'DNER', 'BCL11A', 'FOXC1', 'TUBB2B', 'SLC6A14', 'DSC3', 'CRISPLD1', 'SFRP1', 'BAMBI', 'GPM6B', 'DSC2', 'FREM2', 'SOX10', 'PTCHD1', 'NRTN', 'FAM198A', 'KCNK5', 'COL2A1', 'VANGL2', 'SIX3', 'DSG3', 'CHMP4C', 'KRT15', 'KIT', 'FRMD3', 'TET1', 'RNF182', 'PRAME', 'TDRD12', 'KRT6B', 'SERPINB5', 'KLF5', 'TMEM158', 'CYB5R2', 'FOXP4AS1', 'PRTFDC1', 'MAP2', 'CYP39A1', 'TFCP2L1', 'VGLL1', 'MAMLD1', 'ID4', 'LRRN1', 'TCF7L1', 'GGH', 'CRYAB', 'NINL', 'NCAN', 'EPHB3', 'PHGDH', 'PRKX', 'PCAT6', 'ESRP1', 'FZD7', 'SLC26A2', 'ADIPOQ', 'ADH1B', 'OGN', 'CD36', 'FABP4', 'CHRDL1', 'CFD', 'LINC01279', 'PLIN1', 'SFRP4', 'ACKR1', 'IGF1', 'HBB', 'EFEMP1', 'GPX3', 'CXCL14', 'ENPP2', 'SRPX', 'DPT', 'IL33', 'AOC3', 'F13A1', 'ITM2A', 'GPR34', 'IGFBP6', 'G0S2', 'EDNRB', 'MFAP5', 'MRC1', 'CCDC80', 'LEP', 'DCN', 'CILP', 'ITIH5', 'GIMAP7', 'TMEM100', 'CFH', 'DCLK1', 'SYNPO2', 'ADGRL4', 'MRGPRF', 'EMCN', 'EBF1', 'AKR1C3', 'FOSB', 'CXCL12', 'TSPAN7', 'TGFBR3', 'CNRIP1', 'C7', 'PCOLCE2', 'ADAMTS5', 'LRRN4CL', 'WISP2', 'PROS1', 'AKR1C2', 'GIMAP6', 'FOS', 'MAMDC2', 'CCL19', 'GHR', 'LPL', 'HTR2B', 'HMCN1', 'FGL2', 'TIMP4', 'CAV1', 'GPAM', 'EGR3', 'OLFML1', 'GGTA1P', 'NDN', 'SPARCL1', 'P2RY14', 'MFAP4', 'CLU', 'C2orf40', 'SERPINF1', 'GALNT15', 'MMRN2', 'TCEAL1', 'ANGPTL1', 'SPON1', 'ADRB2', 'LY96', 'ADGRD1', 'PPARG', 'FSTL1', 'PCSK5', 'PLTP', 'HSD17B11', 'CH25H', 'ZCCHC24', 'C6', 'C16orf54', 'SELP', 'SLIT2', 'MPEG1', 'FMO2', 'COLEC12', 'ALDH1A1', 'THBS4', 'SCN4B', 'RSPO3', 'VSIG4', 'VGLL3', 'SEMA3G', 'AOX1', 'OMD', 'AGTR1', 'FAT4', 'JAM2', 'SRGN', 'CIDEC', 'CAVIN2', 'FBLN1', 'SLIT3', 'FMOD', 'CPXM1', 'FMO1', 'GIMAP2', 'PDGFRL', 'KCTD12', 'CPVL', 'JCHAIN', 'TNMD', 'FAM162B', 'MCTP1', 'GEM', 'GNG11', 'CLIC2', 'LHFPL6', 'SFRP2', 'PLSCR4', 'S1PR1', 'GIMAP1', 'CLDN5', 'CDH5', 'ZEB2', 'MEOX1', 'COL15A1', 'MIR100HG', 'APOLD1', 'ZNF423', 'ADGRF5', 'ACVR1C', 'ZFPM2', 'MME', 'PLA2G2A', 'CD163', 'PDE2A', 'PLIN4', 'CD69', 'CTSK', 'ECSCR', 'TFPI', 'LYVE1', 'FHL1', 'HAS2', 'WLS', 'NRN1', 'PCK1', 'CD14', 'PTGDS', 'AKAP12', 'PLPP1', 'EVI2A', 'OLFML3', 'MEOX2', 'SCARA5', 'DAB2', 'GIMAP4', 'CFI', 'TMEM255A', 'IGFBP4', 'FBN1', 'SLC19A3', 'CAV2', 'GZMK', 'CDO1', 'DIPK1A', 'CD93', 'RELN', 'C3', 'DUSP6', 'AQP1', 'ECM2', 'SOX17', 'SELL', 'C1QB', 'CPE', 'MGLL', 'NAP1L3', 'IGDCC4', 'RARRES2', 'EPDR1', 'RGS18', 'CSF2RB', 'PRICKLE2', 'ANKRD29', 'CCDC69', 'EPB41L3', 'RGL1', 'MS4A6A', 'CLDN11', 'PLPP3', 'PECAM1', 'LIFR', 'MICU3', 'NNMT', 'LPAR1', 'PRRX1', 'RNASE6', 'HOXD8', 'MAN1C1', 'IL6', 'CD248', 'C1R', 'SPRY1', 'TM6SF1', 'MEF2C', 'COX7A1', 'MT1M', 'TCF4', 'PAMR1', 'STEAP1', 'EVI2B', 'CLEC2B', 'ABCA6', 'C1QA', 'FBLN5', 'NEXN', 'PEAR1', 'PCOLCE', 'HCAR3', 'PDGFD', 'SELE', 'GLT8D2', 'AADAC', 'KCNJ8', 'FILIP1L', 'NID2', 'THSD7A', 'FCN1', 'LUM', 'EMP3', 'ANGPTL2', 'FCGR2B', 'HOXA5', 'MAOA', 'CCDC3', 'LIMA1', 'CPED1', 'HLADPA1', 'CCDC178', 'TMEM140', 'ZBTB16', 'IL10RA', 'LINC01140', 'PTPRC', 'MS4A4A', 'GPR183', 'PRG4', 'HTRA1', 'TMEM119', 'HSD11B1', 'LRRC32', 'RASD1', 'TSHZ2', 'PRSS23', 'HCLS1', 'ID3', 'TMEM132C', 'HAS1', 'IL6ST', 'HLADMA', 'EMP1', 'TWIST1', 'MS4A7', 'RCAN2', 'TMTC1', 'MEST', 'CHL1', 'MAN1A1', 'NR3C1', 'GYG2', 'C1orf162', 'TXNIP', 'CYTIP', 'CHSY3', 'FGF7P3', 'HLADRA', 'TM4SF18', 'P2RY13', 'PTN', 'ACSL1', 'THBD', 'IRF8', 'SPRY2', 'DOCK11', 'MNDA', 'LAMA2', 'KAT2B', 'SCGB1D2', 'CLMP', 'GPR171', 'ASPA', 'C1S', 'CYP1B1', 'ANGPT1', 'FRMD6', 'FMO3', 'ITGBL1', 'NAP1L5', 'MMRN1', 'ZFP36', 'ACKR2', 'CES1', 'PROCR', 'CSF1R', 'APLNR', 'CREBL2', 'SNAI2', 'GPR146', 'C1orf54', 'LGMN', 'PLAC8', 'RUNDC3B', 'PPP1R16B', 'LDB2', 'CELF2', 'SERPING1', 'CD52', 'DDR2', 'CYYR1', 'SLC16A7', 'ANXA1', 'KLB', 'CCL2', 'BCHE', 'SEMA3C', 'TRBC1', 'LRCH2', 'FBLN2', 'MEIS2', 'NUAK1', 'GPRASP1', 'CD34', 'TCIM', 'ADAM12', 'FOXO1', 'CTSC', 'SMIM3', 'GFPT2', 'S100A4', 'SAMHD1', 'MN1', 'BHMT2', 'ITGA1', 'SUCNR1', 'EPS8', 'RBMS3', 'HEG1', 'PALMD', 'TNFRSF17', 'CCR1', 'RBP7', 'BNC2', 'SLFN11', 'EFEMP2', 'VWF', 'IL7R', 'CARD6', 'RAMP3', 'CCL18', 'EMX2', 'INMT', 'TYROBP', 'TNFRSF1B', 'ADAMTS1', 'GMFG', 'KLF4', 'FYN', 'TNN', 'CASQ2', 'PIP', 'FOXA1', 'DHRS2', 'TFF1', 'MLPH', 'AGR3', 'TFF3', 'NAT1', 'AGR2', 'C9orf152', 'GATA3', 'SIDT1', 'REEP6', 'MUCL1', 'AR', 'TOX3', 'GPR160', 'PRR15', 'FAM110C', 'CYP4Z2P', 'CEACAM6', 'KIAA1324', 'AZGP1', 'CPB1', 'DSCAMAS1', 'CYP2B7P', 'STARD10', 'DACH1', 'CA12', 'SDR16C5', 'CMBL', 'KRT18', 'CYP4Z1', 'ZNF703', 'LOC101926959', 'ALCAM', 'TSPAN1', 'SMIM14', 'SYBU', 'SHISA2', 'CAPN13', 'ZG16B', 'BMPR1B', 'PKIB', 'GPRC5A', 'CLSTN2', 'SLC39A6', 'CYP4X1', 'VAV3', 'ABAT', 'INPP4B', 'SLC2A10', 'TFAP2B', 'FAM174B', 'UGT2B28', 'HPGD', 'TPRG1', 'SLC9A3R1', 'GFRA1', 'GALNT6', 'GALNT7', 'PRR15L', 'KCNE4', 'FBP1', 'LINC00993', 'SLC16A6', 'TMC4', 'COMP', 'CLGN', 'LRG1', 'CRIP1', 'CAPN8', 'NQO1', 'COL10A1', 'ANXA9', 'PDZK1', 'SERHL2', 'CXXC5', 'ARMT1', 'HSPB1', 'SYTL2', 'SLC27A2', 'ERBB4', 'CLCA2', 'DHCR24', 'GPD1L', 'NPNT', 'TMC5', 'MUC1', 'TSPAN8', 'REEP1', 'ACADSB', 'CREB3L4', 'EFHD1', 'PLAT', 'TBC1D9', 'HMGCS2', 'DEGS2', 'WWP1', 'MPV17L', 'TNNT1', 'SPDEF', 'HIST1H4H', 'ZBTB42', 'ALDH3B2', 'KRT8', 'FSIP1', 'SHROOM3', 'HIST1H1C', 'MCCC2', 'ACOX2', 'ABCA12', 'MB', 'SYT1', 'MSMB', 'MSX2', 'POTEM', 'ABCC11', 'HIST2H2BE', 'FAM214A', 'SLC44A4', 'ANKRD30A', 'BIK', 'GREB1', 'MATN3', 'ALOX15B', 'MRPS30', 'SLC7A8', 'CROT', 'CYP4B1', 'TTC8', 'TCEAL2', 'LRBA', 'RND1', 'PRLR', 'ACOT4', 'BPIFB1', 'SYT17', 'TMEM45B', 'DCXR', 'CERS6', 'CYB5A', 'ACSS3', 'MARVELD2', 'FLRT3', 'LYPD6B', 'SORD', 'TRIL', 'ATP7B', 'IRX5', 'ZNF652', 'MAGED2', 'MYO5C', 'RERG', 'PNPLA4', 'HIST1H2BC', 'PGR', 'NRIP1', 'C5orf30', 'HGD', 'AP1M2', 'ARFGEF3', 'VSTM2A', 'REPS2', 'ESRRG', 'STC2', 'REEP5', 'SPOPL', 'P4HTM', 'RAB30', 'LRRC31', 'CERS4', 'RAB17', 'DYNLRB2', 'EPB41L5', 'LINC01116', 'GRP', 'SDC4', 'AKR1D1', 'SLC39A11', 'SLC19A2', 'SMIM22', 'HSPA2', 'BLVRB', 'GATA3AS1', 'GSE1'};
predictors = inputTable(:, predictorNames);
response = inputTable.Genesymbols;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
